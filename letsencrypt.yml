#!/usr/bin/env ansible-playbook
---
#############################
##
## Generate / renew certs
##
#############################

- name: letsencrypt_certs
  hosts: localhost
  vars_files:
    - passwords.vault
    - letsencrypt_vars.yml

  tasks:
  - name: fail if vault not decrypted
    fail: msg="Vault not decrypted"
    when: freedns_user is undefined or freedns_password is undefined

  # uses https://github.com/acmesh-official/acme.sh
  - name: wildcard_cert
    command: /home/pladd/git/acme.sh/acme.sh --issue --dns dns_freedns -d {{ domain }} -d {{ wildcard_domain }} -d {{ wildcard_home_domain }}
    environment:
      FREEDNS_User: "{{ freedns_user }}"
      FREEDNS_Password: "{{ freedns_password }}"
    register: wc_output
    failed_when: wc_output.rc != 0 and wc_output.rc != 2
    changed_when: wc_output.rc == 0
    notify:
    - build_pkcs12
    - build_combined_cert
    - build_ca_to_root

  - name: root_cert
    get_url:
      url: https://letsencrypt.org/certs/trustid-x3-root.pem.txt
      dest: "{{ acme_dir }}/"
    notify:
    - build_ca_to_root

  - name: config_output
    debug:
      var: wc_output

  #### ILO is too old to handle cert...
  # - name: ilo_cert
  #   command: /home/pladd/git/acme.sh/acme.sh --signcsr --csr {{ acme_dir }}/beast-ilo.home.pladd.net/ilo_csr.txt
  #   environment:
  #     FREEDNS_User: "{{ freedns_user }}"
  #     FREEDNS_Password: "{{ freedns_password }}"
  #   register: ilo_output
  #   failed_when: ilo_output.rc != 0 and ilo_output.rc != 2
  #   changed_when: ilo_output.rc == 0

  # - name: config_output
  #   debug:
  #     var: ilo_output

  handlers:
  - name: build_pkcs12
    openssl_pkcs12:
      path: "{{ cert_file_prefix }}.p12"
      privatekey_path: "{{ cert_file_prefix }}.key"
      certificate_path: "{{ certs_dir }}/fullchain.cer"
      name: pladd.net wildcard
  - name: build_combined_cert
    template:
      src: certs/combined_wildcard_cert_key_template.j2
      dest: "{{ certs_dir }}/{{ domain }}_with_key.cer"
    vars:
      first: "{{ lookup('file', cert_file_prefix+'.cer') }}"
      second: "{{ lookup('file', cert_file_prefix+'.key') }}"
  - name: build_ca_to_root
    template:
      src: certs/combined_wildcard_cert_key_template.j2
      dest: "{{ certs_dir }}/ca_to_root.cer"
    vars:
      first: "{{ lookup('file', '{{ certs_dir}}/ca.cer') }}"
      second: "{{ lookup('file', '{{ acme_dir }}/trustid-x3-root.pem.txt') }}"


#############################
##
## Deploy certs to cockpit
##
## https://access.redhat.com/solutions/3946491
#############################
- name: deploy_to_cockpit
  hosts: rhel_hosts,fedora_hosts
  vars_files:
    - letsencrypt_vars.yml
  tasks:
  - name: install_cockpit_cert
    copy:
      src: "{{ certs_dir }}/{{ domain }}_with_key.cer"
      dest: "/etc/cockpit/ws-certs.d/{{ domain }}.cert"
      owner: root
      group: root
      mode: 0640
  - name: restart_cockpit
    service:
      name: cockpit
      state: restarted

#############################
##
## Deploy certs to RHV
##
## from:
## * https://access.redhat.com/articles/216903
## * https://access.redhat.com/documentation/en-us/red_hat_virtualization/4.3/html/administration_guide/appe-Red_Hat_Enterprise_Virtualization_and_SSL#Replace
## * https://access.redhat.com/solutions/2610251
#############################
- name: deploy_to_RHV
  hosts: rhv_manager_hosts
  vars_files:
    - letsencrypt_vars.yml

  tasks:
  - name: backup_rhv_cert
    copy:
      remote_src: yes
      src: /etc/pki/ovirt-engine/keys/apache.p12
      dest: /etc/pki/ovirt-engine/keys/apache.p12.bak
      owner: root
      group: root
      mode: u=rw,go-rwx

  - name: replace_rhv_cert
    copy:
      src: "{{ cert_file_prefix }}.p12"
      dest: /etc/pki/ovirt-engine/keys/apache.p12
      owner: root
      group: root
      mode: u=rw,go-rwx
    notify: restart_rhv_cert_services

  # - name: start_maint_mode
  #   command: hosted-engine --set-maintenance --mode=global

  - name: new_trust_anchor
    copy:
      src: "{{ certs_dir }}/ca.cer"
      dest: /etc/pki/ca-trust/source/anchors
      owner: root
      group: root
      mode: u=rw,go-rwx
    notify: trust_anchor

  - name: replace_apache_ca
    copy:
      src: "{{ certs_dir }}/ca.cer"
      dest: /etc/pki/ovirt-engine/apache-ca.pem
      owner: root
      group: root
      mode: u=rw,go-rwx
    notify: restart_rhv_cert_services

  - name: backup_apache_cert_key
    copy:
      remote_src: yes
      src: /etc/pki/ovirt-engine/certs/apache.{{ item }}
      dest: /etc/pki/ovirt-engine/certs/apache.{{ item }}.bak
      owner: root
      group: root
      mode: u=rw,go-rwx
    loop:
    - cer
    # - key - not there

  - name: install_new_key
    copy:
      src: "{{ cert_file_prefix }}.key"
      dest: /etc/pki/ovirt-engine/keys/apache.key.nopass
      owner: root
      group: root
      mode: 0640
    notify: restart_rhv_cert_services

  - name: install_new_cert
    copy:
      src: "{{ certs_dir }}/fullchain.cer"
      dest: /etc/pki/ovirt-engine/certs/apache.cer
      owner: root
      group: root
      mode: 0640
    notify: restart_rhv_cert_services

  - name: trust_store_file
    copy:
      src: certs/99-custom-truststore.conf
      dest: /etc/ovirt-engine/engine.conf.d/99-custom-truststore.conf
    notify: trust_anchor

  - name: copy_websocket_proxy_conf
    copy:
      remote_src: yes
      src: /etc/ovirt-engine/ovirt-websocket-proxy.conf.d/10-setup.conf
      dest: /etc/ovirt-engine/ovirt-websocket-proxy.conf.d/99-setup.conf

  - name: websocket_proxy_conf_addons
    lineinfile:
      path: /etc/ovirt-engine/ovirt-websocket-proxy.conf.d/99-setup.conf
      line: "{{ item }}"
    loop:
    - SSLs_CERTIFICATE=/etc/pki/ovirt-engine/certs/apache.cer
    - SSL_KEY=/etc/pki/ovirt-engine/keys/apache.key.nopass
    - ENGINE_HTTPS_PKI_TRUST_STORE="/etc/pki/java/cacerts"
    - ENGINE_HTTPS_PKI_TRUST_STORE_PASSWORD=""
    notify: restart_rhv_cert_services

  # - name: end_maint_mode
  #   command: hosted-engine --set-maintenance --mode=none

  handlers:
    - name: trust_anchor
      command: trust anchor /etc/pki/ovirt-engine/ca.pem
      notify: update_ca_trust
    - name: update_ca_trust
      command: update-ca-trust
      notify: restart_rhv_cert_services
    - name: restart_rhv_cert_services
      service:
        name: "{{ item }}"
        state: restarted
      loop:
      - ovirt-websocket-proxy
      - ovirt-provider-ovn
      - ovirt-engine
      # - ovirt-imageio-proxy
      - httpd

#############################
##
## Deploy certs to PiHole
##
#############################
- name: deploy_to_pihole
  hosts: pihole
  vars:
    pihole_certs_dir: /etc/ssl/private
  vars_files:
    - letsencrypt_vars.yml
  tasks:
  - name: pihole_certs
    copy:
      src: "{{ certs_dir }}/{{ item.file }}"
      dest: "{{ pihole_certs_dir }}/{{ domain }}.{{ item.extension }}"
      owner: www-data
      group: www-data
      mode: 0640
    notify: restart_lighttpd
    loop:
    - { file: fullchain.cer, extension: pem }
    - { file: "{{ domain }}.key", extension: key }
  - name: lighttpd_config
    template:
      src: certs/pihole_lighthttpd_external.conf.j2
      dest: "/etc/lighttpd/external.conf"
    notify: restart_lighttpd

  handlers:
  - name: restart_lighttpd
    service:
      name: lighttpd
      state: restarted

#############################
##
## Deploy certs to Sat6
##
## https://access.redhat.com/documentation/en-us/red_hat_satellite/6.6/html-single/installing_satellite_server_from_a_connected_network/index#configuring-satellite-custom-server-certificate_satellite
#############################
- name: deploy_to_sat6
  hosts: sat6
  vars:
    sat6_certs_dir: /root/satellite_cert
  vars_files:
    - letsencrypt_vars.yml
  tasks:
  - name: sat6_certdir
    file:
      dest: "{{ sat6_certs_dir }}"
      state: directory
  - name: sat6_certs
    copy:
      src: "{{ item.src }}"
      dest: "{{ sat6_certs_dir }}/{{ item.dest }}"
      mode: 0640
    loop:
    - { src: "{{ certs_dir }}/{{ domain }}.cer", dest: "{{ domain }}.pem" }
    - { src: "{{ certs_dir }}/{{ domain }}.key", dest: "{{ domain }}.key" }
    - { src: "{{ certs_dir }}/ca_to_root.cer", dest: ca.pem }
  - name: check_certs
    command:
      argv:
        - katello-certs-check
        - "-c {{ sat6_certs_dir }}/{{ domain }}.pem"
        - "-k {{ sat6_certs_dir }}/{{ domain }}.key"
        - "-b {{ sat6_certs_dir }}/ca.pem"
    register: check_output

  # - name: check_output
  #   debug:
  #     var: check_output
  
  - name: install_certs
    command:
      argv:
      - satellite-installer
      - --scenario
      - satellite
      - --certs-server-cert
      - "{{ sat6_certs_dir }}/{{ domain }}.pem"
      - --certs-server-key
      - "{{ sat6_certs_dir }}/{{ domain }}.key"
      - --certs-server-ca-cert
      - "{{ sat6_certs_dir }}/ca.pem"
      - --certs-update-server
      - --certs-update-server-ca

#############################
##
## Deploy certs to Unifi
##
#############################
- name: deploy_to_unifi
  hosts: unifi
  vars:
    unifi_certs_dir: /var/lib/unifi
  vars_files:
    - unifi.vault
    - letsencrypt_vars.yml
  tasks:
  - name: unifi_keystore
    java_keystore:
      name: unifi
      certificate: "{{ lookup('file', cert_file_prefix+'.cer') }}"
      private_key: "{{ lookup('file', cert_file_prefix+'.key') }}"
      password: aircontrolenterprise
      dest: "{{ unifi_certs_dir }}/keystore_new"

  - name: unifi_cert_backup
    copy:
      remote_src: true
      src: "{{ unifi_certs_dir }}/keystore_new"
      dest: "{{ unifi_certs_dir }}/keystore"
      backup: true
    notify: restart_unifi

  handlers:
  - name: restart_unifi
    service:
      name: unifi
      state: restarted
...
