#!/usr/bin/env ansible-playbook
---
- hosts: vdo_hosts

  tasks:
  - name: vdo packages
    yum:
      name:
        - vdo
        - kmod-kvdo
      state: latest

  - name: vdo service
    service:
      name: vdo
      state: started
      enabled: true

- hosts: ogre
  vars:
    mount_point: /rhv_data
    vdo_devname: rhv_data

  tasks:
  # - name: rhv_partition
  #   parted:
  #     device: /dev/sda
  #     number: 4
  #     name: r
  #     state: present
  #     flags: [ lvm ]
  #     part_start: 2378498572288B
  #     part_end: 40%
  - name: vg_for_RHV
    lvg:
      vg: rhv_vg
      pvs: /dev/sda4

  - name: lv_for_vdo
    lvol:
      vg: rhv_vg
      lv: vdo_lv
      size: 100%VG

  # needs https://github.com/ansible/ansible/issues/54556 - fails after created
  - name: vdo_volume
    vdo:
      name: "{{ vdo_devname }}"
      state: present
      running: yes
      device: /dev/mapper/rhv_vg-vdo_lv
      logicalsize: 3T

  - name: xfs format
    filesystem:
      dev: "/dev/mapper/{{ vdo_devname }}"
      fstype: xfs
      resizefs: yes

  - name: determine_mount_name
    command: systemd-escape -p --suffix=mount {{ mount_point }}
    register: mount_filename
    changed_when: false

  - name: show_mount_name
    debug:
      var: mount_filename.stdout

  - name: vdo mount
    template:
      src:  vdo/vdo.j2
      dest: /etc/systemd/system/{{ mount_filename.stdout }}
    vars:
      vdo_devname: rhv_data
      fstype: xfs

  - name: vdo mounted
    service:
      name: "{{ mount_filename.stdout }}"
      state: started
      enabled: true

- hosts: beast
  vars:
    mount_point: /var/lib/libvirt/images
    vdo_devname: vdovol

  tasks:
  - name: vdolv
    lvol:
      vg: rootvg
      lv: vdolv
      size: 500G

  # needs https://github.com/ansible/ansible/issues/54556 - fails after created
  - name: vdo volume
    vdo:
      name: "{{ vdo_devname }}"
      state: present
      running: yes
      device: /dev/mapper/rootvg-vdolv
      logicalsize: 1.5T

  - name: xfs format
    filesystem:
      dev: "/dev/mapper/{{ vdo_devname }}"
      fstype: xfs
      resizefs: yes

  - name: determine_mount_name
    command: systemd-escape -p --suffix=mount {{ mount_point }}
    register: mount_filename
    changed_when: false

  - name: show_mount_name
    debug:
      var: mount_filename.stdout

  - name: vdo mount
    template:
      src:  vdo/vdo.j2
      dest: /etc/systemd/system/{{ mount_filename.stdout }}
    vars:
      fstype: xfs

  - name: vdo mounted
    service:
      name: "{{ mount_filename.stdout }}"
      state: started
      enabled: true

...
